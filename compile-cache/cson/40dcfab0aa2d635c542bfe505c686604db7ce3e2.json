{".source.rust":{"allow":{"prefix":"allow","body":"#[allow(${1:lint})]"},"allow!":{"prefix":"allow!","body":"#![allow(${1:lint})]"},"deny":{"prefix":"deny","body":"#[deny(${1:lint})]"},"deny!":{"prefix":"deny!","body":"#![deny(${1:lint})]"},"derive":{"prefix":"derive","body":"#[derive(${1:Trait})]"},"enum":{"prefix":"enum","body":"enum ${1:TypeName} {\n\t$2\n}"},"fn":{"prefix":"fn","body":"fn ${1:function_name}($2) {\n\t${3:unimplemented!()}\n}"},"fnr":{"prefix":"fnr","body":"fn ${1:function_name}($2) -> ${3:TypeName} {\n\t${4:unimplemented!()}\n}"},"for":{"prefix":"for","body":"for ${1:variable} in ${2:iterator} {\n\t$3\n}"},"if":{"prefix":"if","body":"if ${1:expression} {\n\t$2\n}"},"impl":{"prefix":"impl","body":"impl ${1:TypeName} {\n\t$2\n}"},"let":{"prefix":"let","body":"let ${1:variable} = ${2:value};"},"loop":{"prefix":"loop","body":"loop {\n\t$1\n}"},"macro":{"prefix":"macro","body":"macro_rules! ${1:macro_name} {\n\t($2) => ($3);\n}"},"main":{"prefix":"main","body":"fn main() {\n\t${1:unimplemented!()}\n}"},"match":{"prefix":"match","body":"match ${1:expression} {\n\t$2\n}"},"print":{"prefix":"print","body":"print!(\"${1:{${2::?}\\}}\", ${3});"},"println":{"prefix":"println","body":"println!(\"${1:{${2::?}\\}}\", ${3});"},"static":{"prefix":"static","body":"static ${1:CONSTANT}: ${2:TypeName} = ${3:value};"},"struct":{"prefix":"struct","body":"struct ${1:TypeName} {\n\t$2\n}"},"test":{"prefix":"test","body":"#[test]\nfn ${1:test_name}() {\n\t${2:unimplemented!()}\n}"},"testmod":{"prefix":"testmod","body":"#[cfg(test)]\nmod tests {\n\tuse super::*;\n\n\t#[test]\n\tfn ${1:test_name}() {\n\t\t${2:unimplemented!()}\n\t}\n}"},"trait":{"prefix":"trait","body":"trait ${1:TypeName} {\n\t$2\n}"},"type":{"prefix":"type","body":"type ${1:TypeName} = ${2:TypeName};"},"warn":{"prefix":"warn","body":"#[warn(${1:lint})]"},"warn!":{"prefix":"warn!","body":"#![warn(${1:lint})]"},"while":{"prefix":"while","body":"while ${1:expression} {\n\t$2\n}"}}}