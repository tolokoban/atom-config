# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# http://flight-manual.atom.io/using-atom/sections/basic-customization/#_cson

".source.html":
  "<x-widget>...":
    prefix: "wdg"
    body: """<x-widget name="$1">$0</$1>}"""
".source.js":
  "CODE_BEHIND":
    prefix: "cb"
    body: """/* exported CODE_BEHIND */
const CODE_BEHIND = { ${1:init} };

/**
 * @this ${2:ViewXJS}
function $1() {
    $0
}
"""
  "Trace var in console":
    prefix: "tr"
    body: 'console.info("$1=", $1)'
  "-- -> /******************":
    prefix: "--"
    body: """/**
 * @module `(file-name-sans-extension (buffer-name))`
 *
 * @description
 * $1
 *
 * @example
 * var mod = require('`(file-name-sans-extension (buffer-name))`');
 */
$0"""
  'var that = this;':
    'prefix': 'that'
    'body': 'var that = this;'
  "arr -> Array.isArray($0)":
    prefix: "arr"
    body: """Array.isArray($0)"""
  "var $1 = $_parseArg(arg_$1);":
    prefix: "arg"
    body: """var ${1:args} = Array.prototype.slice.call( arguments );$0"""
  "New Toloframework component":
    prefix: "com"
    body: """/**
 * Component ${1:x-my-component}
 */

exports.tags = ["$1"];
exports.priority = 0;

/**
 * Compile a node of the HTML tree.
 */
exports.compile = function(root, libs) {
$0
};
"""
  "console.error();":
    prefix: "err"
    body: """console.error(${1:err});$0"""
  "describe('should...', function() {...})":
    prefix: "des"
    body: """describe('$1', ($2) => {
    $0
});"""
  "ext":
    prefix: "ext"
    body: """// Inheritance from ${1:Widget}
`(mapconcat 'identity (mapcar 'capitalize (split-string (car (last (split-string (file-name-sans-extension (buffer-name)) "\\\\."))) "-")) "")`.prototype = Object.create(${1:Widget}.prototype);
`(mapconcat 'identity (mapcar 'capitalize (split-string (car (last (split-string (file-name-sans-extension (buffer-name)) "\\\\."))) "-")) "")`.prototype.constructor = `(mapconcat 'identity (mapcar 'capitalize (split-string (car (last (split-string (file-name-sans-extension (buffer-name)) "\\\\."))) "-")) "")`;
"""
  "dom: New class.":
    prefix: "dom"
    body: """"use strict";

var $ = require("dom");
var DB = require("tfw.data-binding");

/**
 * @class $1
 *
 * @param {boolean} opts.visible - Set the visiblity of the component.
 *
 * @example
 * var $1 = require("$1");
 * var instance = new $1({ visible: false });
 */
var $1 = function(opts) {
    var elem = $.elem( this, 'div' );
    $0
    DB.propRemoveClass( this, 'visible', 'hide' );

    opts = DB.extend({
         visible: true
    }, opts, this);
};


module.exports = $1;"""
  "fora -> for (i=0 ; i<arguments.length ; ...":
    prefix: "fora"
    body: """Array.slice.call(arguments).forEach((arg, idx) => {
$0
});"""
  "export":
    prefix: "export"
    body: """/**
 * ${5:$1}
 * @param {${3:string}} $2 - $4.
 */
module.exports.$1 = function($2) {
$0
};

"""
  "forap -> var args = []; for (i=0 ; i<arguments.length ; ...":
    prefix: "forap"
    body: """var ${1:i}, ${2:args} = [];
for ($1 = ${3:0} ; $1 < arguments.length ; $1++) $2.push(arguments[$1]);$0"""
  "fore -> Array.forEach(...)":
    prefix: "fore"
    body: """$1.forEach(function (${2:itm, idx, arr}) {
$0
});
"""
  "fori -> for (i=0 ; i<toto.length ; i++) ...":
    prefix: "fori"
    body: """for( ${1:i} = 0 ; $1 < $2.length ; $1++ ) {
var ${3:item} = $2[$1];$0
}
"""
  "fork --> for( key in toto ) ...":
    prefix: "fork"
    body: """for( ${1:key} in $2 ) {
${3:val} = $2[$1];$0
}
"""
  "function( ... ) {}":
    prefix: "fun"
    body: """
/**
 * @param {${3:any}} $2
 * @returns {${4:undefined}}
 */
function$1($2) {
    $0
}"""
  "defineProperty read only":
    prefix: "get"
    body: """${3:Object}.defineProperty( this, '${1:element}', {
value: ${2:$.div()},
writable: false, configurable: false, enumerable: true
});$0"""
  "defineProperty":
    prefix: "getset"
    body: """${2:Object}.defineProperty( `(mapconcat 'identity (mapcar 'capitalize (split-string (car (last (split-string (file-name-sans-extension (buffer-name)) "\\\\."))) "-")) "")`.prototype, '${1:value}', {
get: function() { return this._$1; },
set: function(v) { this._$1 = v; },
configurable: true, enumerable: true
});$0"""
  "if(  ) {}":
    prefix: "if"
    body: """if( $1 ) {
$0
}"""
  "if( typeof {} === '{}' )":
    prefix: "iftyp"
    body: """if( typeof $1 ${2:=}== '${3:undefined}' ) $0"""
  "console.log();":
    prefix: "log"
    body: """console.log($0);"""
  "it('should...', function() {...})":
    prefix: "it"
    body: """it('$1', function($2) {
    $0
});
"""
  "mod: Module for require().":
    prefix: "mod"
    body: """/**
 * @example
 * var `(mapconcat 'identity (mapcar 'capitalize (split-string (car (last (split-string (file-name-sans-extension (buffer-name)) "\\\\."))) "-")) "")` = require("`(file-name-sans-extension (buffer-name))`");
 * var instance = new `(mapconcat 'identity (mapcar 'capitalize (split-string (car (last (split-string (file-name-sans-extension (buffer-name)) "\\\\."))) "-")) "")`($1);
 * @class `(mapconcat 'identity (mapcar 'capitalize (split-string (car (last (split-string (file-name-sans-extension (buffer-name)) "\\\\."))) "-")) "")`
 */
var `(mapconcat 'identity (mapcar 'capitalize (split-string (car (last (split-string (file-name-sans-extension (buffer-name)) "\\\\."))) "-")) "")` = function($1) {
    $0
};


`(mapconcat 'identity (mapcar 'capitalize (split-string (car (last (split-string (file-name-sans-extension (buffer-name)) "\\\\."))) "-")) "")`.create = function($1) {
return new `(mapconcat 'identity (mapcar 'capitalize (split-string (car (last (split-string (file-name-sans-extension (buffer-name)) "\\\\."))) "-")) "")`($1);
};
module.exports = `(mapconcat 'identity (mapcar 'capitalize (split-string (car (last (split-string (file-name-sans-extension (buffer-name)) "\\\\."))) "-")) "")`;"""
  "{\"name\": \"ZANOLLA Jules\", \"days\": \"M\"},":
    prefix: "par"
    body: """{"name": "$1", "days": "${2:LMJV}", "mail": "$3", "exclude": [$4]},$0"""
  "new Promise(...)":
    prefix: "pro"
    body: """new Promise(function(resolve, reject) {
    $0
});"""
  "Toto.prototype.method = function()":
    prefix: "proto"
    body: """/**
 * @member ${1:`(mapconcat 'identity (mapcar 'capitalize (split-string (car (last (split-string (file-name-sans-extension (buffer-name)) "\\\\."))) "-")) "")`}.$2
 * @param $3
 */
$1.prototype.$2 = function($3) {
    $0
};
"""
  "req":
    prefix: "req"
    body: """var ${2:FS} = require("${1:fs}")$3;$0"""
  "Accessor pour un attribut.":
    prefix: "set"
    body: """        /**
	 * Accessor for ${1:name}.
	 */
	$1: function(v) {
	    if (v === undefined) return this._$1;
	    this._$1 = v;
	    return this;
	}$0
"""
  "return new Promise(...)":
    prefix: "retpro"
    body: """return new Promise(function (resolve, reject) {
    $0
});"""
  "try {} catch(e) {}":
    prefix: "try"
    body: """try {
   $0
}
catch (e) {
   console.error("[${1:`(buffer-name)`}:$2]", e);
   throw(Error("[${1:`(buffer-name)`}:$2]\n" + e));
}
"""
  "if( toto === undefined ) toto = \"blabla\";":
    prefix: "undef"
    body: '$1 = typeof $1 !== "undefined" ? $1 : $2'
  "Optional function argument":
    prefix: "opt"
    body: '$1 = typeof _$1 !== "undefined" ? _$1 : $2'
  "use":
    prefix: "use"
    body: """"use strict";
$0"""
  "_('intl')":
    prefix: "_"
    body: """_('$1'$2)$0"""
